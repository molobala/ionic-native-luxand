{"version":3,"sources":["../../../src/@ionic-native/plugins/Luxand/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAAA;;;;;;;;;;GAUG;AACH,OAAO,EAAE,UAAA,EAAW,MAAO,eAAA,CAAgB;AAC3C,OAAO,EAAE,MAAA,EAAQ,OAAA,EAAS,iBAAA,EAAkB,MAAO,oBAAA,CAAqB;AAExE;;;;;;;;;;;;;;;;;;;;GAoBG;AAWH,IAAa,MAAM;IAAS,0BAAiB;IAA7C;;IAqDA,CAAC;IAnDC;;;;OAIG;IAEH,qBAAI,GAAJ,UAAK,MAAoB;QACvB,MAAM,CAAC,CAAC,yDAAyD;IACnE,CAAC;IACD;;;;OAIG;IAEH,yBAAQ,GAAR,UAAS,MAAyB;QAChC,MAAM,CAAC,CAAC,yDAAyD;IACnE,CAAC;IACD;;;;OAIG;IAEH,sBAAK,GAAL,UAAM,MAAyB;QAC7B,MAAM,CAAC,CAAC,yDAAyD;IACnE,CAAC;IACD;;;;OAIG;IAEH,sBAAK,GAAL,UAAM,EAAU;QACd,MAAM,CAAC,CAAC,yDAAyD;IACnE,CAAC;IACD;;;OAGG;IAEH,4BAAW,GAAX;QACE,MAAM,CAAC,CAAC,yDAAyD;IACnE,CAAC;IAQH,aAAC;AAAD,CArDA,AAqDC,CArD2B,iBAAiB,GAqD5C;AANM,iBAAU,GAA0B;IAC3C,EAAE,IAAI,EAAE,UAAU,EAAE;CACnB,CAAC;AACF,kBAAkB;AACX,qBAAc,GAAmE,cAAM,OAAA,EAC7F,EAD6F,CAC7F,CAAC;AA5CA;IADC,OAAO,EAAE;;;;kCAGT;AAOD;IADC,OAAO,EAAE;;;;sCAGT;AAOD;IADC,OAAO,EAAE;;;;mCAGT;AAOD;IADC,OAAO,EAAE;;;;mCAGT;AAMD;IADC,OAAO,EAAE;;;;yCAGT;AA7CU,MAAM;IAVlB,MAAM,CAAC;QACN,UAAU,EAAE,QAAQ;QACpB,MAAM,EAAE,sBAAsB;QAC9B,SAAS,EAAE,eAAe;QAC1B,IAAI,EAAE,EAAE;QACR,OAAO,EAAE,EAAE;QACX,gBAAgB,EAAE,EAAE;QACpB,SAAS,EAAE,CAAC,SAAS,EAAE,KAAK,CAAC,CAAC,4DAA4D;KAC3F,CAAC;GAEW,MAAM,CAqDlB;SArDY,MAAM","file":"index.js","sourceRoot":"","sourcesContent":["/**\n * This is a template for new plugin wrappers\n *\n * TODO:\n * - Add/Change information below\n * - Document usage (importing, executing main functionality)\n * - Remove any imports that you are not using\n * - Remove all the comments included in this template, EXCEPT the @Plugin wrapper docs and any other docs you added\n * - Remove this note\n *\n */\nimport { Injectable } from '@angular/core';\nimport { Plugin, Cordova, IonicNativePlugin } from '@ionic-native/core';\n\n/**\n * @name Luxand\n * @description\n * This plugin does something\n *\n * @usage\n * ```typescript\n * import { Luxand } from '@ionic-native/luxand';\n *\n *\n * constructor(private luxand: Luxand) { }\n *\n * ...\n *\n *\n * this.luxand.functionName('Hello', 123)\n *   .then((res: any) => console.log(res))\n *   .catch((error: any) => console.error(error));\n *\n * ```\n */\n@Plugin({\n  pluginName: 'Luxand',\n  plugin: 'codova-plugin-luxand', // npm package name, example: cordova-plugin-camera\n  pluginRef: 'window.Luxand', // the variable reference to call the plugin, example: navigator.geolocation\n  repo: '', // the github repository URL for the plugin\n  install: '', // OPTIONAL install command, in case the plugin requires variables\n  installVariables: [], // OPTIONAL the plugin requires variables\n  platforms: ['Android', 'iOS'] // Array of platforms supported, example: ['Android', 'iOS']\n})\n\nexport class Luxand extends IonicNativePlugin {\n\n  /**\n   * Initialize Luxand SDK\n   * @param config {LuxandConfig} Some param to configure something\n   * @return {Promise<any>} Returns a promise that resolves when something happens\n   */\n  @Cordova()\n  init(config: LuxandConfig): Promise<any> {\n    return; // We add return; here to avoid any IDE / Compiler errors\n  }\n  /**\n   * Identify methode, try to register a face in internal data base\n   * @param params\n   * @return {Promise<OMLFacialData>} Returns a promise that resolves when something happens\n   */\n  @Cordova()\n  identify(params: {timeout: number}): Promise<OMLFacialData> {\n    return; // We add return; here to avoid any IDE / Compiler errors\n  }\n  /**\n   * Login method, try to authenticated a face\n   * @param params\n   * @return {Promise<OMLFacialData>} Returns a promise that resolves when something happens\n   */\n  @Cordova()\n  login(params: {timeout: number}): Promise<OMLFacialData> {\n    return; // We add return; here to avoid any IDE / Compiler errors\n  }\n  /**\n   * clear method, try to remove a face from internal database\n   * @param id {number}\n   * @return {Promise<OMLFacialData>} Returns a promise that resolves when something happens\n   */\n  @Cordova()\n  clear(id: number): Promise<OMLFacialData> {\n    return; // We add return; here to avoid any IDE / Compiler errors\n  }\n  /**\n   * clearMemory method, try to clear internal database\n   * @return {Promise<OMLFacialData>} Returns a promise that resolves when something happens\n   */\n  @Cordova()\n  clearMemory(): Promise<OMLFacialData> {\n    return; // We add return; here to avoid any IDE / Compiler errors\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\nexport interface LuxandConfig {\n  licence: string;\n  dbname: string;\n  loginTryCount: number;\n}\n\nexport interface OMLFacialData {\n  status: string;\n  message: string;\n  name: string;\n  id: number;\n  extra: {\n    AGE?: any;\n    GENDER?: any;\n    EYESOPENED?: any;\n    SMILE: any;\n  };\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}